
# Create a virtual environment
python -m venv venv

# Activate virtual environment
source venv/bin/activate  # On Windows, use 'venv\Scripts\activate'

[type only venv\Scripts\activate it will activate]

pip install python-dotenv
pip install python3-saml


pip install backports.zoneinfo

# Install Django
pip install django

# Install Django Rest Framework
pip install djangorestframework

# Create Django project
django-admin startproject success_tool
cd success_tool

----------------------create app and configuration------------------------------------------------

# Create Django apps
python manage.py startapp dashboard
python manage.py startapp account

In your success_tool/settings.py:

# Add 'dashboard' and 'account' to INSTALLED_APPS
INSTALLED_APPS = [
    # ...
    'dashboard',
    'account',
]


# Add Django Rest Framework for API
INSTALLED_APPS += ['rest_framework']


# Configure MSAL settings (replace with your Azure AD app details)
MSAL_CLIENT_ID = 'your_client_id'
MSAL_AUTHORITY = 'https://login.microsoftonline.com/your_tenant_id'

# Configure Django Rest Framework settings for authentication
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'account.backends.AzureADAuthentication',
    ],
}


----------------------------------------------------------------
create model inside "dashboard" app

models.py => create Issue class


=============================Install Mysql================================================

pip install mysqlclient

Then update success_tool/settings.py

# success_tool/settings.py
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'your_database_name',
        'USER': 'your_database_user',
        'PASSWORD': 'your_database_password',
        'HOST': 'localhost',  # Replace with your MySQL server host if it's not local
        'PORT': '3306',       # Replace with your MySQL server port if it's not the default
    }
}

Apply migration :

python manage.py makemigrations
python manage.py migrate

// create super user
python manage.py createsuperuser

python manage.py runserver

===============================================================

# Install necessary packages, including requests
pip install -r requirements.txt

========================Install for swaggers==========================================

pip install drf-yasg

# settings.py

INSTALLED_APPS = [
    # ... other apps ...
    'rest_framework',
    'drf_yasg',
    'dashboard',
    'account',
]


# reporting/urls.py
from django.contrib import admin
from django.urls import path, re_path, include
from rest_framework import permissions
from drf_yasg.views import get_schema_view
from drf_yasg import openapi

schema_view = get_schema_view(
    openapi.Info(
        title="Your API",
        default_version='v1',
        description="Your API description",
        terms_of_service="https://yourapp.com/terms/",
        contact=openapi.Contact(email="contact@yourapp.com"),
        license=openapi.License(name="Your License"),
    ),
    public=True,
    permission_classes=(permissions.AllowAny,),
)

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/', include('dashboard.urls')),
    # ... other paths ...
    path('swagger/', schema_view.with_ui('swagger', cache_timeout=0),
         name='schema-swagger-ui'),
    path('redoc/', schema_view.with_ui('redoc', cache_timeout=0),
         name='schema-redoc'),
]

python manage.py runserver

Visit http://127.0.0.1:8000/swagger/ or http://127.0.0.1:8000/redoc/

================================Install celery==================================

pip install celery[redis]

------------------------------------------------------
# success_tool/celery.py
from __future__ import absolute_import, unicode_literals
import os
from celery import Celery
from celery.schedules import crontab

# set the default Django settings module for the 'celery' program.
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'success_tool.settings')

# create a Celery instance and configure it with the Django settings.
app = Celery('success_tool')

# Using a string here means the worker doesn't have to serialize
# the configuration object to child processes.
app.config_from_object('django.conf:settings', namespace='CELERY')

# Load task modules from all registered Django app configs.
app.autodiscover_tasks()

# Celery Beat schedule
app.conf.beat_schedule = {
    'fetch-and-save-jira-data': {
        'task': 'success_tool.tasks.fetch_and_save_jira_data',
        'schedule': crontab(minute=0, hour=0),  # Adjust the schedule as needed
    },
}

------------------------------------
Open a terminal and run the following commands:
celery -A success_tool worker --loglevel=info

Open another terminal and run:
celery -A success_tool beat --loglevel=info

================================write requirements =============================================

pip freeze > requirements

========================check celery script=====================================================================

=> python .\manage.py shell 

=> from success_tool.tasks import fetch_and_save_jira_data

=> fetch_and_save_jira_data()

thenk call the function

=========================Mysql Seeting for charset=================================================
check :

SHOW VARIABLES LIKE 'character_set_database';
SHOW VARIABLES LIKE 'collation_database';


ALTER DATABASE ifsreporting_local CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;

ALTER TABLE dashboard_issue CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;

======================================================================================================



=======================================================================================





